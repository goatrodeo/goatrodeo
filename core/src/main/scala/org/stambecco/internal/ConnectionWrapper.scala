/*
 * Rodeo Lib
 *
 * Copyright 2010 WorldWide Conferencing, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 */

package org.stambecco
package internal

import java.sql.Savepoint
import java.sql.{Connection, Array => JdbcArray}
import java.util.Properties
import java.util.concurrent.Executor

private[stambecco] class ConnectionWrapper(what: Connection) extends Connection {
  def clearWarnings() = what.clearWarnings()
  def close() = what.close()
  def commit() = what.commit()
  def createArrayOf(typeName: String, elements: Array[Object]): JdbcArray = what.createArrayOf(typeName, elements)

  def createBlob() = what.createBlob()
  
  def createClob() = what.createClob()
  def createNClob() = what.createNClob()
  def createSQLXML() = what.createSQLXML()
         
  def createStatement() = what.createStatement()
         
  def createStatement(resultSetType: Int, resultSetConcurrency: Int) = what.createStatement(resultSetType, resultSetConcurrency)
  def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int) =
    what.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)

  def createStruct(typeName: String, attributes: Array[Object]) = what.createStruct(typeName, attributes)
  def getAutoCommit() = what.getAutoCommit()

  def getCatalog() = what.getCatalog()

  def getClientInfo() = what.getClientInfo()

  def getClientInfo(name: String) = what.getClientInfo(name)

  def getHoldability() = what.getHoldability()

  def getMetaData() = what.getMetaData()

  def getTransactionIsolation() = what.getTransactionIsolation()

  def getTypeMap() = what.getTypeMap()

  def getWarnings() = what.getWarnings()

  def isClosed() = what.isClosed()

  def isReadOnly() = what.isReadOnly()

  def isValid(timeout: Int) = what.isValid(timeout)

  def nativeSQL(sql: String) = what.nativeSQL(sql)

  def prepareCall(sql: String) = what.prepareCall(sql)

  def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int) = what.prepareCall(sql, resultSetType, resultSetConcurrency)

  def prepareCall(sql: String, resultSetType: Int,
                  resultSetConcurrency: Int,
                  resultSetHoldability: Int) = what.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  def prepareStatement(sql: String) = what.prepareStatement(sql)

  def prepareStatement(sql: String, autoGeneratedKeys: Int) = what.prepareStatement(sql, autoGeneratedKeys)

  def prepareStatement(sql: String, columnIdexes: Array[Int]) = what.prepareStatement(sql, columnIdexes)

  def prepareStatement(sql: String, columnNames: Array[String]) = what.prepareStatement(sql, columnNames)

  def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int) = what.prepareStatement(sql, resultSetType, resultSetConcurrency)

  def prepareStatement(sql: String, resultSetType: Int,
                       resultSetConcurrency: Int,
                       resultSetHoldability: Int) = what.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)

  def releaseSavepoint(savepoint: Savepoint) = what.releaseSavepoint(savepoint)

  def rollback() = what.rollback()

  def rollback(savepoint: Savepoint) = what.rollback(savepoint)

  def setAutoCommit(autoCommit: Boolean) = what.setAutoCommit(autoCommit)

  def setCatalog(calalog: String) = what.setCatalog(calalog)

  def setClientInfo(properties: Properties) = what.setClientInfo(properties)

  def setClientInfo(name: String, value: String) = what.setClientInfo(name, value)

  def setHoldability(holdability: Int) = what.setHoldability(holdability)

  def setReadOnly(readOnly: Boolean) = what.setReadOnly(readOnly)

  def setSavepoint() = what.setSavepoint()

  def setSavepoint(name: String) = what.setSavepoint(name)

  def setTransactionIsolation(level: Int) = what.setTransactionIsolation(level)

  def setTypeMap(map: java.util.Map[String, Class[_]]) = what.setTypeMap(map)

  def isWrapperFor(iface: Class[_]) = iface.isAssignableFrom(what.getClass)
  def unwrap[T](iface: Class[T]): T = what.asInstanceOf[T]

  def abort(executor: Executor) {
    what.abort(executor)
  }

  def getNetworkTimeout = what.getNetworkTimeout

  def getSchema = what.getSchema

  def setNetworkTimeout(executor: Executor, milliseconds: Int) {
    what.setNetworkTimeout(executor, milliseconds)
  }

  def setSchema(schema: String) {
    what.setSchema(schema)
  }
}
